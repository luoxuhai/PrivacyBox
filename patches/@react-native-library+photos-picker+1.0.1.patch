diff --git a/node_modules/@react-native-library/photos-picker/ios/ImagePickerManager.m b/node_modules/@react-native-library/photos-picker/ios/ImagePickerManager.m
index 20d00de..e37e077 100644
--- a/node_modules/@react-native-library/photos-picker/ios/ImagePickerManager.m
+++ b/node_modules/@react-native-library/photos-picker/ios/ImagePickerManager.m
@@ -10,6 +10,7 @@
 @interface ImagePickerManager ()
 
 @property (nonatomic, strong) RCTResponseSenderBlock callback;
+@property (nonatomic, strong) RCTResponseSenderBlock onDidFinishPicking;
 @property (nonatomic, copy) NSDictionary *options;
 
 @end
@@ -45,18 +46,19 @@ @implementation ImagePickerManager
     });
 }
 
-RCT_EXPORT_METHOD(launchImageLibrary:(NSDictionary *)options callback:(RCTResponseSenderBlock)callback)
+RCT_EXPORT_METHOD(launchImageLibrary:(NSDictionary *)options callback:(RCTResponseSenderBlock)callback onDidFinishPicking:(RCTResponseSenderBlock)onDidFinishPicking)
 {
     target = library;
     photoSelected = NO;
     dispatch_async(dispatch_get_main_queue(), ^{
-        [self launchImagePicker:options callback:callback];
+        [self launchImagePicker:options callback:callback onDidFinishPicking:onDidFinishPicking];
     });
 }
 
-- (void)launchImagePicker:(NSDictionary *)options callback:(RCTResponseSenderBlock)callback
+- (void)launchImagePicker:(NSDictionary *)options callback:(RCTResponseSenderBlock)callback onDidFinishPicking:(RCTResponseSenderBlock)onDidFinishPicking
 {
     self.callback = callback;
+    self.onDidFinishPicking = onDidFinishPicking;
     
     if (target == camera && [ImagePickerUtils isSimulator]) {
         self.callback(@[@{@"errorCode": errCameraUnavailable}]);
@@ -100,7 +102,8 @@ - (void) showPickerViewController:(UIViewController *)picker
 
 -(NSMutableDictionary *)mapImageToAsset:(NSData *)imageData phAsset:(PHAsset *)phAsset {
     NSMutableDictionary *asset = [[NSMutableDictionary alloc] init];
-    NSString *filename =  phAsset.filename;
+    NSString *filename = [phAsset valueForKey:@"filename"];
+
     NSString *outputURL = [[self getTmpDirectory] stringByAppendingPathComponent:filename];
 
     [imageData writeToFile:outputURL atomically:YES];
@@ -108,12 +111,11 @@ -(NSMutableDictionary *)mapImageToAsset:(NSData *)imageData phAsset:(PHAsset *)p
     NSURL *fileURL = [NSURL fileURLWithPath:outputURL];
 
     asset[@"uri"] = [fileURL absoluteString];
-    asset[@"type"] = [ImagePickerUtils getFileTypeFromUrl:outputURL];
-    asset[@"fileSize"] = [ImagePickerUtils getFileSizeFromUrl:outputURL];
+    asset[@"type"] = [ImagePickerUtils getFileTypeFromUrl:fileURL];
+    asset[@"fileSize"] = [ImagePickerUtils getFileSizeFromUrl:fileURL];
     asset[@"fileName"] = filename;
-    asset[@"width"] = @(image.size.width);
-    asset[@"height"] = @(image.size.height);
-    asset[@"timestamp"] = [self getDateTimeInUTC:phAsset.creationDate];
+    asset[@"width"] = @(phAsset.pixelHeight);
+    asset[@"height"] = @(phAsset.pixelHeight);
     asset[@"id"] = phAsset.localIdentifier;
     CLLocation * location = phAsset.location;
     asset[@"location"] = @{@"speed": @(location.speed),
@@ -126,44 +128,41 @@ -(NSMutableDictionary *)mapImageToAsset:(NSData *)imageData phAsset:(PHAsset *)p
 
 -(NSMutableDictionary *)mapVideoToAsset:(AVAsset*)avAsset phAsset:(PHAsset * _Nullable)phAsset error:(NSError **)error {
     NSURL *sourceURL = [(AVURLAsset *)avAsset URL];
-    NSString *filename =  phAsset.filename;
+    NSString *filename = [phAsset valueForKey:@"filename"];
     NSString *outputURL = [[self getTmpDirectory] stringByAppendingPathComponent:filename];
+    NSURL *fileURL = [NSURL fileURLWithPath:outputURL];
 
     NSFileManager *fileManager = [NSFileManager defaultManager];
     
     // Delete file if it already exists
-    if ([fileManager fileExistsAtPath:outputURL.path]) {
-        [fileManager removeItemAtURL:outputURL error:nil];
+    if ([fileManager fileExistsAtPath:fileURL.path]) {
+        [fileManager removeItemAtURL:fileURL error:nil];
     }
-    [fileManager copyItemAtURL:url toURL:outputURL error:error];
+    [fileManager copyItemAtURL:sourceURL toURL:fileURL error:error];
 
     if (error && *error) {
         return nil;
     }
 
-    NSURL *fileURL = [NSURL fileURLWithPath:outputURL];
-
     NSMutableDictionary *asset = [[NSMutableDictionary alloc] init];
-    CGSize dimentions = [ImagePickerUtils getVideoDimensionsFromUrl:outputURL];
+    CGSize dimentions = [ImagePickerUtils getVideoDimensionsFromUrl:fileURL];
     asset[@"fileName"] = filename;
-    asset[@"duration"] = [NSNumber numberWithDouble:CMTimeGetSeconds(avAsset.duration)];
+    asset[@"duration"] = @(phAsset.duration * 1000);
     asset[@"uri"] = [fileURL absoluteString];
-    asset[@"type"] = [ImagePickerUtils getFileTypeFromUrl:outputURL];
-    asset[@"fileSize"] = [ImagePickerUtils getFileSizeFromUrl:outputURL];
+    asset[@"type"] = [ImagePickerUtils getFileTypeFromUrl:fileURL];
+    asset[@"fileSize"] = [ImagePickerUtils getFileSizeFromUrl:fileURL];
     asset[@"width"] = @(dimentions.width);
     asset[@"height"] = @(dimentions.height);
-    asset[@"timestamp"] = [self getDateTimeInUTC:phAsset.creationDate];
     asset[@"id"] = phAsset.localIdentifier;
+    CLLocation * location = phAsset.location;
+    asset[@"location"] = @{@"speed": @(location.speed),
+                           @"altitude": @(location.altitude),
+                           @"latitude": @(location.coordinate.latitude),
+                           @"longitude": @(location.coordinate.longitude)};
 
     return asset;
 }
 
-- (NSString *) getDateTimeInUTC:(NSDate *)date {
-    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
-    [formatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSSZ"];
-    return [formatter stringFromDate:date];
-}
-
 - (void)checkCameraPermissions:(void(^)(BOOL granted))callback
 {
     AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
@@ -280,14 +279,12 @@ - (void)imagePickerController:(UIImagePickerController *)picker didFinishPicking
         photoSelected = YES;
 
         if ([info[UIImagePickerControllerMediaType] isEqualToString:(NSString *) kUTTypeImage]) {
-            NSData *data = [[NSData alloc] init];
-            [data dataWithContentsOfFile:[info[UIImagePickerControllerImageURL] absoluteString]]
+            NSData *data = [NSData dataWithContentsOfFile:[info[UIImagePickerControllerImageURL] absoluteString]];
 
             NSDictionary *imageAsset = [self mapImageToAsset:data phAsset:asset];
             [assets addObject:imageAsset];
         } else {
-            AVAsset *avAsset = [[AVAsset alloc] init];
-            [avAsset assetWithURL:info[UIImagePickerControllerMediaURL]]
+            AVAsset *avAsset = [AVAsset assetWithURL:info[UIImagePickerControllerMediaURL]];
             NSDictionary *videoAsset = [self mapVideoToAsset:avAsset phAsset:asset error:nil];
             [assets addObject:videoAsset];
         }
@@ -340,13 +337,15 @@ - (void)picker:(PHPickerViewController *)picker didFinishPicking:(NSArray<PHPick
         return;
     }
     
+    self.onDidFinishPicking(@[]);
+
     dispatch_group_t completionGroup = dispatch_group_create();
     NSMutableArray<NSDictionary *> *assets = [[NSMutableArray alloc] initWithCapacity:results.count];
 
     for (PHPickerResult *result in results) {
         NSItemProvider *provider = result.itemProvider;
         PHFetchOptions *fetchOptions = [[PHFetchOptions alloc] init];
-        PHFetchOptions.includeHiddenAssets = YES;
+        fetchOptions.includeHiddenAssets = YES;
 
         PHFetchResult* fetchResult = [PHAsset fetchAssetsWithLocalIdentifiers:@[result.assetIdentifier] options:fetchOptions];
         PHAsset *asset = fetchResult.firstObject;
@@ -366,12 +365,10 @@ - (void)picker:(PHPickerViewController *)picker didFinishPicking:(NSArray<PHPick
             CGSize targetSize = CGSizeMake(maxWidth, maxHeight);
 
             [[PHImageManager defaultManager] requestImageDataAndOrientationForAsset:asset options:options 
-                resultHandler:^(NSData *imageData, NSString *dataUTI,
-                                     UIImageOrientation orientation,
-                                     NSDictionary *info) {
+                resultHandler:^(NSData *_Nullable imageData, NSString *_Nullable dataUTI, CGImagePropertyOrientation orientation, NSDictionary *_Nullable info) {
+                
                    NSMutableDictionary *imageAsset = [self mapImageToAsset:imageData phAsset:asset];
                    [assets addObject:imageAsset];
-           
                    dispatch_group_leave(completionGroup);
              }];
         } else if(asset.mediaType == PHAssetMediaTypeVideo) {
diff --git a/node_modules/@react-native-library/photos-picker/ios/ImagePickerUtils.h b/node_modules/@react-native-library/photos-picker/ios/ImagePickerUtils.h
index 53e7387..a3dbfa2 100644
--- a/node_modules/@react-native-library/photos-picker/ios/ImagePickerUtils.h
+++ b/node_modules/@react-native-library/photos-picker/ios/ImagePickerUtils.h
@@ -7,7 +7,7 @@
 
 + (BOOL)isSimulator;
 
-+ (void)setupPickerFromOptions:(UIImagePickerController *)picker options:(NSDictionary *)options target:(RNImagePickerTarget)target;
++ (void)setupPickerFromOptions:(UIImagePickerController *)picker options:(NSDictionary *)options;
 
 + (PHPickerConfiguration *)makeConfigurationFromOptions:(NSDictionary *)options target:(RNImagePickerTarget)target API_AVAILABLE(ios(14));
 
diff --git a/node_modules/@react-native-library/photos-picker/src/index.ts b/node_modules/@react-native-library/photos-picker/src/index.ts
index 2239ae2..ad1f2f7 100644
--- a/node_modules/@react-native-library/photos-picker/src/index.ts
+++ b/node_modules/@react-native-library/photos-picker/src/index.ts
@@ -13,6 +13,7 @@ export function launchCamera(options: CameraOptions, callback?: Callback) {
 export function launchImageLibrary(
   options: ImageLibraryOptions,
   callback?: Callback,
+  onDidFinishPicking?:()=>void
 ) {
-  return nativeImageLibrary(options, callback);
+  return nativeImageLibrary(options, callback, onDidFinishPicking);
 }
diff --git a/node_modules/@react-native-library/photos-picker/src/platforms/native.ts b/node_modules/@react-native-library/photos-picker/src/platforms/native.ts
index 5be9800..1bf23b9 100644
--- a/node_modules/@react-native-library/photos-picker/src/platforms/native.ts
+++ b/node_modules/@react-native-library/photos-picker/src/platforms/native.ts
@@ -33,6 +33,7 @@ export function camera(
 export function imageLibrary(
   options: ImageLibraryOptions,
   callback?: Callback,
+  onDidFinishPicking?: ()=>void,
 ): Promise<ImagePickerResponse> {
   return new Promise((resolve) => {
     NativeModules.ImagePickerManager.launchImageLibrary(
@@ -41,6 +42,7 @@ export function imageLibrary(
         if (callback) callback(result);
         resolve(result);
       },
+      ()=> onDidFinishPicking?.()
     );
   });
 }
