diff --git a/node_modules/expo-store-review/build/StoreReview.js b/node_modules/expo-store-review/build/StoreReview.js
index 6fe8a48..fc45cf2 100644
--- a/node_modules/expo-store-review/build/StoreReview.js
+++ b/node_modules/expo-store-review/build/StoreReview.js
@@ -1,6 +1,3 @@
-import Constants from 'expo-constants';
-import * as Linking from 'expo-linking';
-import { Platform } from 'expo-modules-core';
 import StoreReview from './ExpoStoreReview';
 // @needsAudit
 /**
@@ -25,60 +22,4 @@ export async function requestReview() {
         await StoreReview.requestReview();
         return;
     }
-    // If StoreReview is unavailable then get the store URL from `app.config.js` or `app.json` and open the store
-    const url = storeUrl();
-    if (url) {
-        const supported = await Linking.canOpenURL(url);
-        if (!supported) {
-            console.warn("Expo.StoreReview.requestReview(): Can't open store url: ", url);
-        }
-        else {
-            await Linking.openURL(url);
-        }
-    }
-    else {
-        // If the store URL is missing, let the dev know.
-        console.warn("Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`");
-    }
-}
-// @needsAudit
-/**
- * This uses the `Constants` API to get the `Constants.manifest.ios.appStoreUrl` on iOS, or the
- * `Constants.manifest.android.playStoreUrl` on Android.
- *
- * On Web this will return `null`.
- */
-export function storeUrl() {
-    const { manifest, manifest2 } = Constants;
-    if (Platform.OS === 'ios' && manifest?.ios) {
-        return manifest.ios.appStoreUrl ?? null;
-    }
-    else if (Platform.OS === 'ios' && manifest2?.extra?.expoClient?.ios) {
-        return manifest2.extra.expoClient.ios.appStoreUrl ?? null;
-    }
-    else if (Platform.OS === 'android' && manifest?.android) {
-        return manifest.android.playStoreUrl ?? null;
-    }
-    else if (Platform.OS === 'android' && manifest2?.extra?.expoClient?.android) {
-        return manifest2.extra.expoClient.android.playStoreUrl ?? null;
-    }
-    return null;
-}
-// @needsAudit
-/**
- * @return This returns a promise that fulfills to `true` if `StoreReview.requestReview()` is capable
- * directing the user to some kind of store review flow. If the app config (`app.json`) does not
- * contain store URLs and native store review capabilities are not available then the promise
- * will fulfill to `false`.
- *
- * @example
- * ```ts
- * if (await StoreReview.hasAction()) {
- *   // you can call StoreReview.requestReview()
- * }
- * ```
- */
-export async function hasAction() {
-    return !!storeUrl() || (await isAvailableAsync());
 }
\ No newline at end of file
-//# sourceMappingURL=StoreReview.js.map
\ No newline at end of file
diff --git a/node_modules/expo-store-review/src/StoreReview.ts b/node_modules/expo-store-review/src/StoreReview.ts
index a364668..966dd09 100644
--- a/node_modules/expo-store-review/src/StoreReview.ts
+++ b/node_modules/expo-store-review/src/StoreReview.ts
@@ -1,7 +1,3 @@
-import Constants from 'expo-constants';
-import * as Linking from 'expo-linking';
-import { Platform } from 'expo-modules-core';
-
 import StoreReview from './ExpoStoreReview';
 
 // @needsAudit
@@ -28,58 +24,4 @@ export async function requestReview(): Promise<void> {
     await StoreReview.requestReview();
     return;
   }
-  // If StoreReview is unavailable then get the store URL from `app.config.js` or `app.json` and open the store
-  const url = storeUrl();
-  if (url) {
-    const supported = await Linking.canOpenURL(url);
-    if (!supported) {
-      console.warn("Expo.StoreReview.requestReview(): Can't open store url: ", url);
-    } else {
-      await Linking.openURL(url);
-    }
-  } else {
-    // If the store URL is missing, let the dev know.
-    console.warn(
-      "Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`"
-    );
-  }
-}
-
-// @needsAudit
-/**
- * This uses the `Constants` API to get the `Constants.manifest.ios.appStoreUrl` on iOS, or the
- * `Constants.manifest.android.playStoreUrl` on Android.
- *
- * On Web this will return `null`.
- */
-export function storeUrl(): string | null {
-  const { manifest, manifest2 } = Constants;
-  if (Platform.OS === 'ios' && manifest?.ios) {
-    return manifest.ios.appStoreUrl ?? null;
-  } else if (Platform.OS === 'ios' && manifest2?.extra?.expoClient?.ios) {
-    return manifest2.extra.expoClient.ios.appStoreUrl ?? null;
-  } else if (Platform.OS === 'android' && manifest?.android) {
-    return manifest.android.playStoreUrl ?? null;
-  } else if (Platform.OS === 'android' && manifest2?.extra?.expoClient?.android) {
-    return manifest2.extra.expoClient.android.playStoreUrl ?? null;
-  }
-  return null;
-}
-
-// @needsAudit
-/**
- * @return This returns a promise that fulfills to `true` if `StoreReview.requestReview()` is capable
- * directing the user to some kind of store review flow. If the app config (`app.json`) does not
- * contain store URLs and native store review capabilities are not available then the promise
- * will fulfill to `false`.
- *
- * @example
- * ```ts
- * if (await StoreReview.hasAction()) {
- *   // you can call StoreReview.requestReview()
- * }
- * ```
- */
-export async function hasAction(): Promise<boolean> {
-  return !!storeUrl() || (await isAvailableAsync());
 }
\ No newline at end of file
