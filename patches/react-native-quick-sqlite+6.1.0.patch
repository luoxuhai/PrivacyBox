diff --git a/node_modules/react-native-quick-sqlite/cpp/bindings.cpp b/node_modules/react-native-quick-sqlite/cpp/bindings.cpp
index c486731..90121aa 100644
--- a/node_modules/react-native-quick-sqlite/cpp/bindings.cpp
+++ b/node_modules/react-native-quick-sqlite/cpp/bindings.cpp
@@ -14,12 +14,16 @@ using namespace std;
 using namespace facebook;
 
 namespace osp {
-string docPathStr;
+string dbPathStr;
 std::shared_ptr<react::CallInvoker> invoker;
 
-void install(jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> jsCallInvoker, const char *docPath)
+bool isAbsolutePath(const std::string& str) {
+    return (str.rfind("/", 0) == 0) || (str.rfind("file://", 0) == 0);
+}
+
+void install(jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> jsCallInvoker, const char *dbPath)
 {
-  docPathStr = std::string(docPath);
+  dbPathStr = std::string(dbPath);
   auto pool = std::make_shared<ThreadPool>();
   invoker = jsCallInvoker;
 
@@ -35,7 +39,7 @@ void install(jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> jsCallInvoker
     }
 
     string dbName = args[0].asString(rt).utf8(rt);
-    string tempDocPath = string(docPathStr);
+    string tempDBPath = string(dbPathStr);
     if (count > 1 && !args[1].isUndefined() && !args[1].isNull())
     {
       if (!args[1].isString())
@@ -43,10 +47,11 @@ void install(jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> jsCallInvoker
         throw jsi::JSError(rt, "[react-native-quick-sqlite][open] database location must be a string");
       }
 
-      tempDocPath = tempDocPath + "/" + args[1].asString(rt).utf8(rt);
+      string location = args[1].asString(rt).utf8(rt);
+      tempDBPath = isAbsolutePath(location) ? location : tempDBPath + "/" + location;
     }
 
-    SQLiteOPResult result = sqliteOpenDb(dbName, tempDocPath);
+    SQLiteOPResult result = sqliteOpenDb(dbName, tempDBPath);
 
     if (result.type == SQLiteError)
     {
@@ -66,21 +71,21 @@ void install(jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> jsCallInvoker
       return {};
     }
 
-    string tempDocPath = string(docPathStr);
+    string tempDBPath = string(dbPathStr);
     if (count > 3 && !args[3].isUndefined() && !args[3].isNull())
     {
       if (!args[3].isString())
       {
         throw jsi::JSError(rt, "[react-native-quick-sqlite][attach] database location must be a string");
       }
-
-      tempDocPath = tempDocPath + "/" + args[3].asString(rt).utf8(rt);
+      string location = args[3].asString(rt).utf8(rt);
+      tempDBPath = isAbsolutePath(location) ? location : tempDBPath + "/" + location;
     }
 
     string dbName = args[0].asString(rt).utf8(rt);
     string databaseToAttach = args[1].asString(rt).utf8(rt);
     string alias = args[2].asString(rt).utf8(rt);
-    SQLiteOPResult result = sqliteAttachDb(dbName, tempDocPath, databaseToAttach, alias);
+    SQLiteOPResult result = sqliteAttachDb(dbName, tempDBPath, databaseToAttach, alias);
 
     if (result.type == SQLiteError)
     {
@@ -150,7 +155,7 @@ void install(jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> jsCallInvoker
 
     string dbName = args[0].asString(rt).utf8(rt);
 
-    string tempDocPath = string(docPathStr);
+    string tempDBPath = string(dbPathStr);
     if (count > 1 && !args[1].isUndefined() && !args[1].isNull())
     {
       if (!args[1].isString())
@@ -158,11 +163,12 @@ void install(jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> jsCallInvoker
         throw jsi::JSError(rt, "[react-native-quick-sqlite][open] database location must be a string");
       }
 
-      tempDocPath = tempDocPath + "/" + args[1].asString(rt).utf8(rt);
+      string location = args[1].asString(rt).utf8(rt);
+      tempDBPath = isAbsolutePath(location) ? location : tempDBPath + "/" + location;
     }
 
 
-    SQLiteOPResult result = sqliteRemoveDb(dbName, tempDocPath);
+    SQLiteOPResult result = sqliteRemoveDb(dbName, tempDBPath);
 
     if (result.type == SQLiteError)
     {
diff --git a/node_modules/react-native-quick-sqlite/lib/module/index.js b/node_modules/react-native-quick-sqlite/lib/module/index.js
index e5d851f..d58896e 100644
--- a/node_modules/react-native-quick-sqlite/lib/module/index.js
+++ b/node_modules/react-native-quick-sqlite/lib/module/index.js
@@ -249,9 +249,9 @@ export const typeORMDriver = {
     try {
       QuickSQLite.open(options.name, options.location);
       const connection = {
-        executeSql: (sql, params, ok, fail) => {
+        executeSql: async (sql, params, ok, fail) => {
           try {
-            let response = QuickSQLite.execute(options.name, sql, params);
+            let response = await QuickSQLite.executeAsync(options.name, sql, params);
             enhanceQueryResult(response);
             ok(response);
           } catch (e) {
@@ -259,7 +259,7 @@ export const typeORMDriver = {
           }
         },
         transaction: fn => {
-          QuickSQLite.transaction(options.name, fn);
+         return QuickSQLite.transactionAsync(options.name, fn);
         },
         close: (ok, fail) => {
           try {
